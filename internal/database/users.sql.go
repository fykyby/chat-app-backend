// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO
  users (email, name, password, avatar)
VALUES
  ($1, $2, $3, $4)
RETURNING
  id,
  name,
  email,
  avatar
`

type CreateUserParams struct {
	Email    string
	Name     string
	Password string
	Avatar   pgtype.Text
}

type CreateUserRow struct {
	ID     int32
	Name   string
	Email  string
	Avatar pgtype.Text
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.Name,
		arg.Password,
		arg.Avatar,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Avatar,
	)
	return i, err
}

const getPublicUser = `-- name: GetPublicUser :one
SELECT
  id,
  name,
  avatar
FROM
  users
WHERE
  id = $1
`

type GetPublicUserRow struct {
	ID     int32
	Name   string
	Avatar pgtype.Text
}

func (q *Queries) GetPublicUser(ctx context.Context, id int32) (GetPublicUserRow, error) {
	row := q.db.QueryRow(ctx, getPublicUser, id)
	var i GetPublicUserRow
	err := row.Scan(&i.ID, &i.Name, &i.Avatar)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT
  id, email, name, avatar, password
FROM
  users
WHERE
  email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Avatar,
		&i.Password,
	)
	return i, err
}

const searchPublicUsers = `-- name: SearchPublicUsers :many
SELECT
  id,
  name,
  avatar
FROM
  users
WHERE
  name ILIKE $1
  AND id != $2
LIMIT
  $3
OFFSET
  $4
`

type SearchPublicUsersParams struct {
	Name   string
	ID     int32
	Limit  int32
	Offset int32
}

type SearchPublicUsersRow struct {
	ID     int32
	Name   string
	Avatar pgtype.Text
}

func (q *Queries) SearchPublicUsers(ctx context.Context, arg SearchPublicUsersParams) ([]SearchPublicUsersRow, error) {
	rows, err := q.db.Query(ctx, searchPublicUsers,
		arg.Name,
		arg.ID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchPublicUsersRow
	for rows.Next() {
		var i SearchPublicUsersRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Avatar); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
