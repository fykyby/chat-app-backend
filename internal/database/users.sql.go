// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  email, 
  name,
  password,
  avatar
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, name, email, avatar
`

type CreateUserParams struct {
	Email    string
	Name     string
	Password string
	Avatar   pgtype.Text
}

type CreateUserRow struct {
	ID     int32
	Name   string
	Email  string
	Avatar pgtype.Text
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.Name,
		arg.Password,
		arg.Avatar,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Avatar,
	)
	return i, err
}

const getPublicUser = `-- name: GetPublicUser :one
SELECT id, name, avatar FROM users WHERE id = $1
`

type GetPublicUserRow struct {
	ID     int32
	Name   string
	Avatar pgtype.Text
}

func (q *Queries) GetPublicUser(ctx context.Context, id int32) (GetPublicUserRow, error) {
	row := q.db.QueryRow(ctx, getPublicUser, id)
	var i GetPublicUserRow
	err := row.Scan(&i.ID, &i.Name, &i.Avatar)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, name, password, avatar FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Password,
		&i.Avatar,
	)
	return i, err
}
