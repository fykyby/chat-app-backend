// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: chats.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createChat = `-- name: CreateChat :one
INSERT INTO
  chats (name, avatar, is_group)
VALUES
  ($1, $2, $3)
RETURNING
  id,
  name,
  avatar,
  is_group
`

type CreateChatParams struct {
	Name    pgtype.Text
	Avatar  pgtype.Text
	IsGroup bool
}

func (q *Queries) CreateChat(ctx context.Context, arg CreateChatParams) (Chat, error) {
	row := q.db.QueryRow(ctx, createChat, arg.Name, arg.Avatar, arg.IsGroup)
	var i Chat
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Avatar,
		&i.IsGroup,
	)
	return i, err
}

const createUserChat = `-- name: CreateUserChat :one
INSERT INTO
  users_chats (user_id, chat_id)
VALUES
  ($1, $2)
RETURNING
  user_id,
  chat_id
`

type CreateUserChatParams struct {
	UserID int32
	ChatID int32
}

func (q *Queries) CreateUserChat(ctx context.Context, arg CreateUserChatParams) (UsersChat, error) {
	row := q.db.QueryRow(ctx, createUserChat, arg.UserID, arg.ChatID)
	var i UsersChat
	err := row.Scan(&i.UserID, &i.ChatID)
	return i, err
}

const deleteChat = `-- name: DeleteChat :exec
DELETE FROM
  chats
WHERE
  id = $1
`

func (q *Queries) DeleteChat(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteChat, id)
	return err
}

const getUserChats = `-- name: GetUserChats :many
SELECT
  c.id,
  c.name,
  c.avatar,
  c.is_group
FROM
  chats c
  JOIN users_chats uc ON c.id = uc.chat_id
WHERE
  uc.user_id = $1
`

func (q *Queries) GetUserChats(ctx context.Context, userID int32) ([]Chat, error) {
	rows, err := q.db.Query(ctx, getUserChats, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chat
	for rows.Next() {
		var i Chat
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Avatar,
			&i.IsGroup,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersChat = `-- name: GetUsersChat :one
SELECT
  user_id,
  chat_id
FROM
  users_chats
WHERE
  user_id = $1
  AND chat_id = $2
`

type GetUsersChatParams struct {
	UserID int32
	ChatID int32
}

func (q *Queries) GetUsersChat(ctx context.Context, arg GetUsersChatParams) (UsersChat, error) {
	row := q.db.QueryRow(ctx, getUsersChat, arg.UserID, arg.ChatID)
	var i UsersChat
	err := row.Scan(&i.UserID, &i.ChatID)
	return i, err
}
